{"ast":null,"code":"var _jsxFileName = \"/Users/ihsuanhuang/Documents/m3hw/petest/petlove/src/context/PetContext.js\",\n    _s = $RefreshSig$();\n\n// import from firebase, react, and petService files\nimport { getDoc } from \"firebase/firestore\";\nimport { useEffect, createContext, useState } from \"react\";\nimport { addPet, getAll, updatePet } from \"../services/petService\"; // create the PetContext object with default values for each property.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PetContext = /*#__PURE__*/createContext({\n  pets: [],\n  addNewPet: pet => {},\n  updateCurrentPet: pet => {},\n  removePet: petId => {},\n  likePet: (pet, userId) => {},\n  unLikePet: (pet, userId) => {}\n});\nexport const PetContextProvider = props => {\n  _s();\n\n  const [pets, setPets] = useState([]); // fetche all pets data from some external data source using getAll() function, then maps over the data to create an array of pets with id and other properties.\n  // then, updates the state of the component with the array of pets using setPets()\n\n  useEffect(() => {\n    try {\n      getAll().then(pets => {\n        const currentPets = [];\n        pets.forEach(p => {\n          const pet = {\n            id: p.id,\n            ...p.data()\n          };\n          currentPets.push(pet);\n        });\n        setPets(currentPets);\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, []); // create a enw profile for a pet\n\n  const addNewPet = async pet => {\n    try {\n      // create a pet\n      const refPet = await addPet(pet);\n      const docSnap = await getDoc(refPet);\n      const newPet = {\n        id: docSnap.id,\n        ...docSnap.data()\n      };\n      setPets(prevPets => [...prevPets, newPet]);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // remove pet\n\n\n  const removePet = petId => {\n    // find the pet\n    setPets(prevState => prevState.filter(pet => pet.id !== petId));\n  }; // function to like a pet\n\n\n  const likePet = async (pet, userId) => {\n    try {\n      // find and like the pet\n      const likedBy = pet.likedBy ? [...pet.likedBy, userId] : [userId]; // update \n\n      const updatedPet = { ...pet,\n        likedBy\n      };\n      await updateCurrentPet(updatedPet);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // function to unlike the pet already liked before\n\n\n  const unLikePet = async (pet, userId) => {\n    try {\n      // find and remove the pet\n      const likedBy = pet.likedBy.filter(id => id !== userId); // update the pet\n\n      const updatedPet = { ...pet,\n        likedBy\n      };\n      await updateCurrentPet(updatedPet);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // update status of pet\n\n\n  const updateCurrentPet = async pet => {\n    try {\n      const result = await updatePet(pet); //  not working\n      // const updatedPets = pets.map(p => p.id === result.id ? { id: result.id, ...result.data() } : p);\n      // find pet\n\n      const index = pets.findIndex(p => p.id === result.id);\n      const updatedPets = [...pets]; // update that pet\n\n      updatedPets[index] = { ...result,\n        id: pet.id\n      };\n      setPets(updatedPets);\n    } catch (error) {\n      console.log(error);\n    }\n  }; // return petContextValue\n\n\n  const petContextValue = {\n    pets,\n    addNewPet,\n    likePet,\n    unLikePet,\n    updateCurrentPet,\n    removePet\n  }; // return \n\n  return /*#__PURE__*/_jsxDEV(PetContext.Provider, {\n    value: petContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PetContextProvider, \"7RBAgWZCtqlXVpMU/6w9/5IUzu8=\");\n\n_c = PetContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PetContextProvider\");","map":{"version":3,"names":["getDoc","useEffect","createContext","useState","addPet","getAll","updatePet","PetContext","pets","addNewPet","pet","updateCurrentPet","removePet","petId","likePet","userId","unLikePet","PetContextProvider","props","setPets","then","currentPets","forEach","p","id","data","push","error","console","log","refPet","docSnap","newPet","prevPets","prevState","filter","likedBy","updatedPet","result","index","findIndex","updatedPets","petContextValue","children"],"sources":["/Users/ihsuanhuang/Documents/m3hw/petest/petlove/src/context/PetContext.js"],"sourcesContent":["// import from firebase, react, and petService files\nimport { getDoc } from \"firebase/firestore\";\nimport { useEffect, createContext, useState } from \"react\";\nimport { addPet, getAll, updatePet } from \"../services/petService\";\n\n\n// create the PetContext object with default values for each property.\nexport const PetContext = createContext({\n    pets: [],\n    addNewPet: (pet) => { },\n    updateCurrentPet: (pet) => { },\n    removePet: (petId) => { },\n    likePet: (pet, userId) => { },\n    unLikePet: (pet, userId) => { },\n})\n\nexport const PetContextProvider = (props) => {\n\n    const [pets, setPets] = useState([]);\n\n    // fetche all pets data from some external data source using getAll() function, then maps over the data to create an array of pets with id and other properties.\n    // then, updates the state of the component with the array of pets using setPets()\n\n    useEffect(() => {\n        try {\n            getAll().then((pets) => {\n                const currentPets = [];\n\n                pets.forEach((p) => {\n                    const pet = {\n                        id: p.id,\n                        ...p.data()\n                    }\n                    currentPets.push(pet)\n                });\n                setPets(currentPets);\n            })\n        } catch(error) {\n            console.log(error)\n        }\n    }, [])\n\n\n    // create a enw profile for a pet\n    const addNewPet = async (pet) => {\n        try {\n\n            // create a pet\n            const refPet = await addPet(pet);\n            const docSnap = await getDoc(refPet);\n            const newPet = { id: docSnap.id, ...docSnap.data() };\n            setPets(prevPets => [...prevPets, newPet]);\n\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n    // remove pet\n    const removePet = (petId) => {\n\n        // find the pet\n        setPets((prevState) => prevState.filter(\n            (pet) => pet.id !== petId));\n    };\n\n    // function to like a pet\n    const likePet = async (pet, userId) => {\n        try {\n\n            // find and like the pet\n            const likedBy = pet.likedBy ? [...pet.likedBy, userId] : [userId];\n\n            // update \n            const updatedPet = { ...pet, likedBy };\n            await updateCurrentPet(updatedPet);\n\n        } catch (error) {\n            console.log(error);\n        }\n      };\n\n    // function to unlike the pet already liked before\n    const unLikePet = async (pet, userId) => {\n        try {\n\n            // find and remove the pet\n            const likedBy = pet.likedBy.filter(id => id !== userId);\n            \n            // update the pet\n            const updatedPet = { ...pet, likedBy };\n            await updateCurrentPet(updatedPet);\n\n        } catch (error) {\n            console.log(error);\n        }\n      };\n\n    // update status of pet\n    const updateCurrentPet = async (pet) => {\n        try {\n            const result = await updatePet(pet)\n            \n            //  not working\n            // const updatedPets = pets.map(p => p.id === result.id ? { id: result.id, ...result.data() } : p);\n            \n            // find pet\n            const index = pets.findIndex((p) => p.id === result.id)\n            const updatedPets = [...pets]\n\n            // update that pet\n            updatedPets[index] = { ...result, id: pet.id }   \n            setPets(updatedPets)\n\n        } catch (error) {\n            console.log(error);\n        }\n\n    }\n\n    // return petContextValue\n    const petContextValue = {\n        pets,\n        addNewPet,\n        likePet,\n        unLikePet,\n        updateCurrentPet,\n        removePet\n      };\n\n    // return \n    return (\n    <PetContext.Provider value={petContextValue}>\n        {props.children}\n    </PetContext.Provider>\n    );\n} \n"],"mappings":"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"},"metadata":{},"sourceType":"module"}